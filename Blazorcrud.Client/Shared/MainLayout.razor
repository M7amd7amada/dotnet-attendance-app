@inherits LayoutComponentBase
@inject IUserService UserService

<nav class="navbar navbar-expand navbar-dark bg-dark">
    <a class="navbar-brand" href="/">Attendance Manager</a>
    <div class="navbar-nav">
        <NavLink href="/" Match="NavLinkMatch.All" class="nav-item nav-link">Home</NavLink>
        <NavLink href="/person/1" class="nav-item nav-link">Employees</NavLink>
        <NavLink href="/upload/1" class="nav-item nav-link">File Management</NavLink>
        <NavLink href="/user/1" class="nav-item nav-link">Users</NavLink>
        <NavLink href="/attendance/1" class="nav-item nav-link">Attendances</NavLink>
        <NavLink href="/swagger/index.html" class="nav-item nav-link" target="_blank">API</NavLink>
    </div>
    <div class="navbar-nav ml-auto">
        @if (LoggedIn)
        {
            <span class="nav-item" style="
                transform: translate(-3px, 8px) !important;
                color: white !important;">@UserService.User.Username</span>
            <NavLink href="/user/logout" class="nav-item nav-link" @onclick="Logout">Logout</NavLink>
        }
        else
        {
            <NavLink href="/user/login" class="nav-item nav-link">Login</NavLink>
        }
    </div>
</nav>

<div class="app-container">
    <div class="p-4">
        <div class="container">
            <Alert />
            @Body
        </div>
    </div>
    <footer class="footer">
        <div class="container text-center">
            <span class="text-muted">&copy; M7amd7amada 2023</span>
        </div>
    </footer>
</div>

@code {
    public bool LoggedIn
    {
        get {return UserService.User != null;}
    }

    private async Task Logout()
    {
        if (LoggedIn)
        {
            await UserService.SetToInactive(UserService.User.Id);
            UserService.User.LoginStatus = "Inactive";
            await UserService.UpdateLogoutTime(UserService.User.Id);
            UserService.User.LogoutDate = DateTime.Now.AddDays(2);
            StateHasChanged();
        }
    }
}